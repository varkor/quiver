/* Root styles */

*, *::before, *::after {
    box-sizing: border-box;
}

:root {
    /* UI colours. */
    --ui-black: hsla(0, 0%, 0%, 0.9); /* Almost black. */
    --ui-white: hsl(0, 0%, 96%); /* Almost white. */
    --ui-blue: hsl(200, 100%, 50%); /* Selection blue. */
    --ui-orange: hsl(30, 100%, 50%); /* Highlight orange. */

    --ui-background: transparent;
    --ui-border: hsla(0, 0%, 100%, 0.2);
    --ui-hover: hsla(0, 0%, 100%, 0.1);
    --ui-active: hsla(0, 0%, 100%, 0.2);
    --ui-focus: var(--ui-blue);
    --ui-text: hsla(0, 0%, 100%, 0.6);

    /* Cell states. */
    --cell-hover: hsla(0, 0%, 0%, 0.1);
    --cell-selected: hsla(0, 0%, 0%, 0.2);
    --cell-source: hsla(0, 0%, 0%, 0.2);
    --cell-target: hsla(0, 0%, 0%, 0.2);
}

body {
    position: absolute;
    width: 100%; height: 100%;
    margin: 0;
    overflow: hidden;

    background: white;

    font-family: sans-serif;
}

body:not(.modal) {
    -webkit-user-select: none;
}

/* Special elements */

.MathJax_SVG {
    outline: none;
}

.error-banner {
    position: fixed;
    width: 100%;
    left: 0; top: 0;
    z-index: 200;
    padding: 8px 0;

    background: hsl(0, 50%, 50%);
    color: white;

    text-align: center;

    user-select: none;

    transition: transform 0.2s;
}

.error-banner.hidden {
    transform: translateY(-100%);
}

.close {
    width: 28px; height: 28px;
    margin-left: 20px;

    background: transparent;
    border: none;
    border-radius: 100%;
    outline: none;

    text-align: center;
    color: white;
    font-size: 20px;
}

.close:hover {
    background: hsla(0, 0%, 100%, 0.2);
}

.close:active {
    background: hsla(0, 0%, 100%, 0.4);
}

.close::before {
    content: "Ã—";
}

.logo {
    position: fixed;
    left: 16px; top: 16px;
    width: 100px;

    opacity: 0.8;
}

.logo:hover {
    opacity: 1;
}

.ui:not(.help) .version {
    display: none;
}

.version {
    position: fixed;
    left: 50px; top: 48px;

    font-size: 8pt;
    color: var(--ui-black);

    pointer-events: none;
}

/* The canvas of cells */

.container {
    position: fixed;
    width: 100%;
    height: 100%;
}

.canvas {
    position: absolute;
    left: 50%;
    top: 50%;
    transform-origin: top left;
}

.ui.pan .canvas {
    cursor: grab;
}

.ui.pan .canvas:active {
    cursor: grabbing;
}

/* Grid interaction */

.grid {
    position: fixed;
    pointer-events: none;
    z-index: -100;
}

.grid.hidden {
    display: none;
}

.insertion-point {
    display: block;
    position: absolute;
    margin-left: 1px; margin-top: 1px;

    background: hsla(0, 0%, 0%, 0);

    text-align: center;
    font: 16px sans-serif;
    color: hsla(0, 0%, 0%, 0.4);
}

.insertion-point.revealed {
    background: hsla(0, 0%, 0%, 0.1);
}

.insertion-point::before {
    content: "Add vertex";
    visibility: hidden;
}

.insertion-point.active::before {
    content: "Add edge";
}

.insertion-point.revealed::before {
    visibility: visible;
}

/* Vertices */

.vertex {
    position: absolute;
}

.ui.default .vertex {
    cursor: move;
}

.vertex .content {
    position: absolute;
    transform: translate(-50%, -50%);
    z-index: 2;

    border-radius: 16px;

    text-align: center;
}

.ui.default .vertex .content {
    cursor: default;
}

/* This is so explicit because of the CSS specificity rules. */
.ui.default .vertex:not(.selected):not(.source):not(.target) .content:hover,
.ui.jump .vertex:not(.selected):not(.source):not(.target) .content:hover {
    background: var(--cell-hover);
}

.vertex.source .content {
    background: var(--cell-source);
}

.vertex.target .content {
    background: var(--cell-target);
}

.vertex.selected .content {
    background: var(--cell-selected);
}

.label {
    display: block;
    position: absolute;
    left: 50%; top: 50%;
    transform: translate(-50%, -50%);

    text-align: center;
    font-family: inherit;
    font-size: 26px;
    white-space: nowrap;

    pointer-events: none;
    user-select: none;

    transition: opacity 0.2s;
}

/* The overlay edge drawn while connecting cells. */
.overlay, .overlay .arrow-background  {
    pointer-events: none !important;
}

/* The side panel */

.panel {
    position: fixed;
    z-index: 100;
    overflow-y: auto;

    font: 14px sans-serif;
    color: var(--ui-text);
}

.side.panel {
    width: calc(16px * 18);
    top: 16px;
    bottom: 16px;
    right: 16px;

    border-radius: 16px;

    transition: right 0.1s;
}

.side.panel.hidden {
    right: calc(16px * -18);
}

.ui.connect .panel {
    pointer-events: none;
}

.panel label, .panel button {
    user-select: none;
}

.global {
    left: 50%;
    bottom: 0;
    transform: translateX(-50%);
    width: 40%; min-width: 280px;
    height: 46px;
    padding: 8px;
    /* Display above the export pane. */
    z-index: 101;

    background: var(--ui-black);
    border-radius: 8px 8px 0 0;

    text-align: center;
    white-space: nowrap;
}

.panel .wrapper {
    position: absolute;
    left: 0;
    width: 100%;
    padding: 8px 16px;

    background: var(--ui-black);
    border-radius: 16px;
}

.side label {
    display: block;
    margin-bottom: 8px;
}

.label-input-container {
    position: fixed;
    left: 50%; height: 32px;
    /* Position 8px above the global panel. */
    bottom: calc(8px + 46px);
    width: 40%; min-width: 280px;
    transform: translateX(-50%);

    background: var(--ui-black);
    border-radius: 8px;

    color: var(--ui-white);

    transition: bottom 0.1s;
}

.jump .label-input-container {
    background: var(--ui-orange);
}

.label-input {
    width: 100%; height: 32px;
    padding: 4px 6px;

    background: transparent;
    border: none;
    border-radius: 8px;
    outline: none;

    font-family: monospace;
    font-size: 16pt;
    color: inherit;
    text-align: center;

    transition: width 0.1s;
}

.label-input-container.hidden {
    bottom: calc(-16pt - 4px * 2 - 16px);
}

.label-input:hover:not(:disabled):not(:focus) {
    background: hsla(0, 0%, 15%, 0.9);
}

.label-input:focus {
    background: var(--ui-focus);

    color: black;
}

.input-mode {
    display: inline-block;
    vertical-align: bottom;
    width: 0px; height: 32px;
    line-height: 32px;
    overflow: hidden;

    border-radius: 8px 0 0 8px;

    font-size: 12pt;
    text-align: center;

    transition: width 0.1s;
}

.jump .input-mode {
    width: 80px;
}

.jump .label-input:focus {
    width: calc(100% - 80px);

    background: var(--ui-orange);
    /* We override this value to make `shadow-flash` the correct colour. This isn't really
    semantic naming. */
    --ui-blue: var(--ui-orange);
}

.label-input::selection {
    background-color: white;
}

.panel input[type="text"] {
    padding: 2px 4px;

    background: var(--ui-background);
    border: var(--ui-border) solid 1px;
    border-radius: 2px;
    outline: none;

    font-size: inherit;
    font-family: monospace;
    color: hsl(0, 0%, 96%);
}

.panel input[type="text"]::placeholder {
    color: hsla(0, 0%, 100%, 0.4);
}

.panel input[type="text"]:hover:not(:disabled):not(:focus) {
    background: var(--ui-hover);
}

.panel input[type="text"]:focus {
    background: var(--ui-focus);
    border-color: var(--ui-focus);

    color: hsl(0, 0%, 16%);
}

.panel input[type="text"]:focus::placeholder {
    color: hsla(0, 0%, 0%, 0.4);
}

input[type="text"].flash {
    animation: shadow-flash 0.2s;
}

@keyframes shadow-flash {
    from {
        box-shadow: 0 0 0 4px var(--ui-blue);
    }

    to {
        box-shadow: 0 0 0 var(--ui-blue);
    }
}

.panel .options {
    position: relative;
    margin: 8px 0;

    text-align: center;
}

.panel input[type="radio"] {
    -webkit-appearance: none;
    display: inline-block;
    width: 48px; height: 48px;

    background-color: var(--ui-background);
    background-repeat: no-repeat;
    background-position: center;
    /* We use stacked backgrounds for the background image, */
    /* to allow us to change the image directly via CSS. */
    background-size: 0%, auto;
    border: var(--ui-border) solid 1px;
    border-radius: 2px;
    outline: none;
}

.panel .options.focused input[type="radio"]:not(:checked) {
    background-size: auto, 0%;
    background-color: var(--ui-white);
    border-color: var(--ui-focus);
}

.panel .vertical {
    display: inline-block;
    width: calc(100% - (20% + 4px) * 2);
    vertical-align: top;
}

.panel .vertical + .vertical:not(.centre) {
    margin-left: 4px;
}

.panel .short {
    width: 20%;
}

.panel .centre {
    position: relative;
    left: 50%;
    transform: translateX(-50%);
}

.panel .vertical input[type="radio"] {
    position: relative;
    display: block;
    width: 100%; height: 32px;
    left: 50%;
    transform: translateX(-50%);
    margin: 0; margin-top: -1px;

    border-radius: 0;
}

.panel .vertical input[type="radio"]:first-child {
    margin-top: 0;

    border-radius: 2px 2px 0 0;
}

.panel .vertical input[type="radio"]:last-child {
    border-radius: 0 0 2px 2px;
}

.panel .vertical input[type="radio"].short {
    display: inline-block;
    width: 50%;
    left: 0;
    transform: none;
}

.panel .vertical input[type="radio"].short + input[type="radio"].short {
    border-left-width: 0;
}

.panel .vertical input[type="radio"].short:nth-last-of-type(2) {
    border-radius: 0 0 0 2px;
}

.panel .vertical input[type="radio"].short:last-of-type {
    border-radius: 0 0 2px 0;
}

.panel input[type="radio"]:hover:not(:disabled) {
    background-color: var(--ui-hover);
}

.panel input[type="radio"]:active {
    background-color: var(--ui-active);
}

.panel input[type="radio"]:checked:not(:disabled) {
    background-color: var(--ui-focus);
    background-size: auto, 0%;
    border-color: var(--ui-blue);
}

.panel input[type="range"] {
    -webkit-appearance: none;
    vertical-align: middle;
    width: 75%;

    background: transparent;
    outline: none;

    font: inherit;
    color: inherit;
}

.panel input[type="range"]::after {
    content: attr(value);
    display: inline-block;
    width: 48px;

    text-align: right;
}

.panel .percentage input[type="range"]::after {
    content: attr(value) "%";
}

.panel input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 20px; height: 20px;
    margin-top: calc(-4px);

    background: hsl(0, 0%, 10%);
    border: var(--ui-border) solid 1px;
    border-radius: 20px;
}

.panel input[type="range"].focused::-webkit-slider-thumb {
    background: var(--ui-blue);
    border-color: var(--ui-blue);
}

.panel input[type="range"]::-moz-range-thumb {
    width: 20px; height: 20px;
    margin-top: calc(-4px);

    background: hsl(0, 0%, 10%);
    border: var(--ui-border) solid 1px;
    border-radius: 20px;
}

.panel input[type="range"].focused::-moz-range-thumb {
    background: var(--ui-blue);
    border-color: var(--ui-blue);
}

.panel input[type="range"]:hover:not(:disabled):not(.focused)::-webkit-slider-thumb {
    background: hsl(0, 0%, 20%);
}

.panel input[type="range"]:hover:not(:disabled):not(.focused)::-moz-range-thumb {
    background: hsl(0, 0%, 20%);
}

.panel input[type="range"]::-webkit-slider-runnable-track {
    width: 100%; height: 14px;

    background: var(--ui-background);
    border: var(--ui-border) solid 1px;
    border-radius: 14px;
}

.panel input[type="range"].focused::-webkit-slider-runnable-track {
    background: var(--ui-white);
    border-color: var(--ui-blue);
}

.panel input[type="range"]::-moz-range-track {
    width: 100%; height: 14px;

    background: var(--ui-background);
    border: var(--ui-border) solid 1px;
    border-radius: 14px;
}

.panel input[type="range"].focused::-moz-range-track {
    background: white;
    border-color: var(--ui-blue);
}

.panel input[type="range"]:active:not(.focused)::-webkit-slider-thumb {
    background: hsl(0, 0%, 30%);
}

.panel input[type="range"]:active:not(.focused)::-moz-range-thumb {
    background: hsl(0, 0%, 30%);
}

.panel button {
    position: relative;
    display: block;
    width: 100%; height: 30px;
    margin: 8px 0;

    background: transparent;
    border: var(--ui-border) solid 1px;
    border-radius: 2px;
    outline: none;

    font: inherit;
    color: var(--ui-white);
}

.global button {
    display: inline-block;
    width: calc(25% - 4px);
    margin: 0;
}

.global button:first-of-type {
    margin-right: 4px;
}

.global button:last-of-type {
    margin-left: 4px;
}

.panel button:hover:not(:disabled) {
    background: var(--ui-hover);
}

.panel button:active {
    background: var(--ui-active);
}

kbd {
    position: absolute;
    min-width: 20px;
    padding: 2px 4px;

    background: var(--ui-orange);
    border-radius: 2px;

    color: var(--ui-black);
    text-align: center;

    pointer-events: none;
}

kbd.focused, kbd .focused {
    color: var(--ui-white);
}

kbd.queue {
    background: var(--ui-white);
    border: var(--ui-blue) 1px solid;

    color: var(--ui-blue);
}

.cell.selected kbd.queue {
    background: var(--ui-blue);

    color: var(--ui-white);
}

.ui:not(.help) kbd:not(.queue) {
    display: none;
}

kbd.button, kbd.input {
    left: 0; top: 0;
    transform: translate(-25%, -25%);
}

kbd.slider {
    right: 0;
    transform: translateX(-25%);
}

.ui.jump .cell kbd {
    display: block;
}

.vertex kbd {
    left: 50%; top: 0;
    transform: translateX(-50%);
}

.arrow kbd {
    z-index: 10;
    transform: translate(-50%, -50%);
}

/* `.kbd-requires-focus` and `.triggers-focus` are mutually exclusive classes. The first is
intended to trigger the latter. */
.kbd-requires-focus:not(.focused) kbd:not(.triggers-focus) {
    display: none;
}

.kbd-requires-focus:not(.next-to-focus) kbd.triggers-focus {
    display: none;
}

/* We always display shortcuts for lists when they're focused. */
.kbd-requires-focus.focused kbd {
    display: block;
}

/* Display a tab symbol for the usual keyboard shortcut symbol. This is not necessary when the user
has already pressed tab, placing us in jump mode. */
.ui:not(.jump) .cell kbd::before {
    content: "â‡¥";
}

.indicator-container {
    display: inline-block;
    margin-left: 24px;
}

.panel .success-indicator {
    display: inline-block;
    vertical-align: middle;
    margin-left: 8px;
    width: 18px; height: 18px;

    background: hsl(0, 0%, 36%);
    border-radius: 100%;

    color: hsl(0, 0%, 16%);
    text-align: center;
    line-height: 18px;

    transform: scale(0);

    transition: transform 0.2s;
}

.panel .success-indicator.unknown,
.panel .success-indicator.success,
.panel .success-indicator.failure {
    transform: scale(1);
}

.panel .success-indicator.success::before {
    content: "âœ“";
}

.panel .success-indicator.failure::before {
    content: "âœ•";
}

/* The toolbar */

.toolbar {
    position: fixed;
    height: 48px;
    left: 50%; top: 16px;
    transform: translateX(-50%);
    z-index: 100;

    background: var(--ui-black);
    border-radius: 8px;
    overflow: hidden;

    color: var(--ui-white);

    transition: opacity 0.1s;
}

.ui:not(.default):not(.modal) .toolbar {
    opacity: 0.2;

    pointer-events: none;
}

.toolbar .action {
    position: relative;
    vertical-align: middle;
    width: 48px; height: 48px;

    background: transparent;
    border: none;
    outline: none;

    font: inherit;
    text-align: center;
    font-size: 20px;
    color: inherit;
    white-space: nowrap;

    cursor: default;
    user-select: none;
}

.toolbar .action:hover {
    background: hsl(0, 0%, 28%);
}

.toolbar .action:active {
    background: var(--ui-blue);
}

.toolbar .action:disabled {
    background: transparent;

    color: hsl(0, 0%, 64%);
}

.toolbar .action:disabled .name, .toolbar .action:disabled .shortcut {
    color: hsl(0, 0%, 64%);
}

.toolbar .action .flip {
    display: inline-block;
    transform: scaleX(-1);
}

button.flash {
    animation: background-flash 0.6s ease-in;
}

@keyframes background-flash {
    from {
        background: var(--ui-blue);
    }
}

.toolbar .action .name, .toolbar .action .shortcut {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);

    font-size: 8px;
    line-height: 8px;
    color: hsl(0, 0%, 80%);
}

.toolbar .action .name {
    top: 6px;
}

.toolbar .action .shortcut {
    bottom: 4px;
}

/* Modal elements */

.export {
    position: fixed;
    width: 100%; height: 100%;
    left: 0; top: 0;
    z-index: 100;
    padding: 20px 24px;
    overflow-y: auto;

    background: hsla(0, 0%, 10%, 0.8);

    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
}

.export .warning {
    display: inline-block;
    width: 100%;
    background: hsla(50, 100%, 70%, 1);
    padding: 8pt;
    margin-bottom: 8pt;

    border-radius: 2px;
}

.export .warning.hidden {
    display: none;
}

.export .warning ul {
    margin: 4pt 0;

    list-style-type: circle;
}

.export .code {
    font: 16px monospace;
    color: white;

    white-space: pre-wrap;
    overflow-wrap: break-word;
    tab-size: 4;
    -moz-tab-size: 4;
}

/* Arrows */

.arrow > svg {
    position: absolute;
    left: 0;
    top: 0;
    overflow: visible;
    pointer-events: none;
}

.arrow.invalid, .arrow .invalid {
    display: none;
}

.arrow > svg:first-child {
    z-index: 1;
}

.arrow > svg:nth-child(2) {
    z-index: 4;
}

.arrow:not(.reconnecting) > svg:first-child > .arrow-background {
    pointer-events: stroke;
}

.arrow:not(.selected) > svg:first-child:not(:hover) > .arrow-background,
.ui.connect .cell:not(.target):not(.selected) > svg:first-child:hover > .arrow-background,
.ui.move .cell:not(.selected) > svg:first-child:hover > .arrow-background {
    opacity: 0;
}

.arrow:not(.selected) > svg:first-child:hover {
    opacity: 0.1 !important;
}

.arrow-endpoint {
    display: none;
}

.ui.default .arrow:hover .arrow-endpoint, .ui.default .arrow.selected .arrow-endpoint {
    display: block;
}

.arrow-endpoint {
    position: absolute;
    z-index: 3;

    background: white;
}

.arrow-endpoint:hover {
    border: var(--ui-blue) 2px solid;
}

/* Arrow labels */

.arrow .katex, .arrow .katex-error {
    font-size: 1em;
}
